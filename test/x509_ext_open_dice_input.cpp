/*
 * Copyright 2024 Aurora Operations, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nat20/x509_ext_open_dice_input.h"

#include <gtest/gtest.h>

#include <array>
#include <cstdint>
#include <cstring>
#include <string>
#include <tuple>
#include <vector>

#include "nat20/oid.h"
#include "nat20/x509.h"

class X509ExtOpenDiceInputTest
    : public testing::TestWithParam<
          std::tuple<std::array<uint8_t, N20_OPEN_DICE_HASH_LENGTH> const,
                     std::vector<uint8_t> const,
                     n20_open_dice_configuration_format_t const,
                     std::array<uint8_t, N20_OPEN_DICE_CONFIGURATION_INLINE_LENGTH> const,
                     std::array<uint8_t, N20_OPEN_DICE_HASH_LENGTH> const,
                     std::vector<uint8_t> const,
                     std::array<uint8_t, N20_OPEN_DICE_HASH_LENGTH> const,
                     std::vector<uint8_t> const,
                     n20_open_dice_modes_t const,
                     std::string const,
                     std::vector<uint8_t> const>> {};

std::array<uint8_t, N20_OPEN_DICE_HASH_LENGTH> const CODE_HASH = {
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
};

std::vector<uint8_t> const CODE_DESCRIPTOR = {0x63, 0x6f, 0x64, 0x65};

std::array<uint8_t, N20_OPEN_DICE_CONFIGURATION_INLINE_LENGTH> const CONFIGURATION_INLINE = {
    0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
    0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
    0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
    0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
};

std::array<uint8_t, N20_OPEN_DICE_CONFIGURATION_INLINE_LENGTH> const CONFIGURATION_HASH = {
    0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65,
    0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65,
    0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65,
    0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65,
};

std::vector<uint8_t> const CONFIGURATION_DESCRIPTOR = {0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67};

std::array<uint8_t, N20_OPEN_DICE_HASH_LENGTH> const AUTHORITY_HASH = {
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
};

std::vector<uint8_t> const AUTHORITY_DESCRIPTOR = {0x61, 0x75, 0x74, 0x68};

std::array<uint8_t, N20_OPEN_DICE_CONFIGURATION_INLINE_LENGTH> const EMPTY_CONFIGURATION_INLINE = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

std::array<uint8_t, N20_OPEN_DICE_HASH_LENGTH> const EMPTY_CONFIGURATION_HASH = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

std::vector<uint8_t> const EMPTY_FIELD;

// clang-format off
std::vector<uint8_t> const EXTENSION_WITH_INLINE_CONFIGURATION = {
    // Extension header
    0xA3, 0x82, 0x01, 0x19,
    // Extensions sequence header
    0x30, 0x82, 0x01, 0x15,
    // OpenDICEInputs extension sequence header
    0x30, 0x82, 0x01, 0x11,
    // OpenDICEInputs OID
    0x06, 0x0A, 0x2B, 0x06, 0x01, 0x04, 0x01, 0xD6, 0x79, 0x02, 0x01, 0x18,
    // Critical = True
    0x01, 0x01, 0xFF,
    // OpenDICEInputs Extension Octet String
    0x04, 0x81, 0xFF,
    // OpenDICEInputs Extension Sequence header
    0x30, 0x81, 0xFC,
    // Code Hash
    0xA0, 0x42,
    0x04, 0x40,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    // Code Descriptor
    0xA1, 0x06,
    0x04, 0x04,
    0x63, 0x6f, 0x64, 0x65,
    // Inline Configuration
    0xA3, 0x42,
    0x04, 0x40,
    0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
    0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
    0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
    0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
    // Authority Hash
    0xA4, 0x42,
    0x04, 0x40,
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
    // Authority Descriptor
    0xA5, 0x06,
    0x04, 0x04,
    0x61, 0x75, 0x74, 0x68,
    // Mode
    0xA6, 0x03,
    0x02, 0x01, 0x01,
    // Profile Name
    0xA7, 0x19,
    0x13, 0x17,
    'A', 'u', 'r', 'o', 'r', 'a', ' ', 
    'O', 'p', 'e', 'n', 'D', 'I', 'C', 
    'E', ' ', 'P', 'r', 'o', 'f', 'i', 
    'l', 'e',
};

std::vector<uint8_t> const EXTENSION_WITH_CONFIGURATION_DESCRIPTOR = {
    // Extension header
    0xA3, 0x82, 0x01, 0x25,
    // Extensions sequence header
    0x30, 0x82, 0x01, 0x21,
    // OpenDICEInputs extension sequence header
    0x30, 0x82, 0x01, 0x1D,
    // OpenDICEInputs OID
    0x06, 0x0A, 0x2B, 0x06, 0x01, 0x04, 0x01, 0xD6, 0x79, 0x02, 0x01, 0x18,
    // Critical = True
    0x01, 0x01, 0xFF,
    // OpenDICEInputs Extension Octet String
    0x04, 0x82, 0x01, 0x0A,
    // OpenDICEInputs Extension Sequence header
    0x30, 0x82, 0x01, 0x06,
    // Code Hash
    0xA0, 0x42,
    0x04, 0x40,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    // Code Descriptor
    0xA1, 0x06,
    0x04, 0x04,
    0x63, 0x6f, 0x64, 0x65,
    // Configuration Hash
    0xA2, 0x42,
    0x04, 0x40,
    0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65,
    0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65,
    0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65,
    0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65,
    // Configuration Descriptor
    0xA3, 0x08,
    0x04, 0x06,
    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
    // Authority Hash
    0xA4, 0x42,
    0x04, 0x40,
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
    // Authority Descriptor
    0xA5, 0x06,
    0x04, 0x04,
    0x61, 0x75, 0x74, 0x68,
    // Mode
    0xA6, 0x03,
    0x02, 0x01, 0x01,
    // Profile Name
    0xA7, 0x19,
    0x13, 0x17,
    'A', 'u', 'r', 'o', 'r', 'a', ' ', 
    'O', 'p', 'e', 'n', 'D', 'I', 'C', 
    'E', ' ', 'P', 'r', 'o', 'f', 'i', 
    'l', 'e',
};

std::vector<uint8_t> const EXTENSION_WITHOUT_OPTIONALS = {
    // Extension header
    0xA3, 0x81, 0xEC,
    // Extensions sequence header
    0x30, 0x81, 0xE9,
    // OpenDICEInputs extension sequence header
    0x30, 0x81, 0xE6,
    // OpenDICEInputs OID
    0x06, 0x0A, 0x2B, 0x06, 0x01, 0x04, 0x01, 0xD6, 0x79, 0x02, 0x01, 0x18,
    // Critical = True
    0x01, 0x01, 0xFF,
    // OpenDICEInputs Extension Octet String
    0x04, 0x81, 0xD4,
    // OpenDICEInputs Extension Sequence header
    0x30, 0x81, 0xD1,
    // Code Hash
    0xA0, 0x42,
    0x04, 0x40,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    // Inline Configuration
    0xA3, 0x42,
    0x04, 0x40,
    0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
    0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
    0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
    0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
    // Authority Hash
    0xA4, 0x42,
    0x04, 0x40,
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
    0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
    // Mode
    0xA6, 0x03,
    0x02, 0x01, 0x01,
};
// clang-format on

std::string const AURORA_OPEN_DICE_PROFILE = "Aurora OpenDICE Profile";

INSTANTIATE_TEST_CASE_P(OpenDiceInputEncoding,
                        X509ExtOpenDiceInputTest,
                        testing::Values(std::tuple(CODE_HASH,
                                                   CODE_DESCRIPTOR,
                                                   n20_open_dice_configuration_format_inline_e,
                                                   CONFIGURATION_INLINE,
                                                   EMPTY_CONFIGURATION_HASH,
                                                   EMPTY_FIELD,
                                                   AUTHORITY_HASH,
                                                   AUTHORITY_DESCRIPTOR,
                                                   n20_open_dice_normal_e,
                                                   AURORA_OPEN_DICE_PROFILE,
                                                   EXTENSION_WITH_INLINE_CONFIGURATION),
                                        std::tuple(CODE_HASH,
                                                   CODE_DESCRIPTOR,
                                                   n20_open_dice_configuration_format_descriptor_e,
                                                   EMPTY_CONFIGURATION_INLINE,
                                                   CONFIGURATION_HASH,
                                                   CONFIGURATION_DESCRIPTOR,
                                                   AUTHORITY_HASH,
                                                   AUTHORITY_DESCRIPTOR,
                                                   n20_open_dice_normal_e,
                                                   AURORA_OPEN_DICE_PROFILE,
                                                   EXTENSION_WITH_CONFIGURATION_DESCRIPTOR),
                                        std::tuple(CODE_HASH,
                                                   EMPTY_FIELD,
                                                   n20_open_dice_configuration_format_inline_e,
                                                   CONFIGURATION_INLINE,
                                                   EMPTY_CONFIGURATION_HASH,
                                                   EMPTY_FIELD,
                                                   AUTHORITY_HASH,
                                                   EMPTY_FIELD,
                                                   n20_open_dice_normal_e,
                                                   "",
                                                   EXTENSION_WITHOUT_OPTIONALS)));

TEST_P(X509ExtOpenDiceInputTest, OpenDiceInputEncoding) {
    auto [code_hash,
          code_descriptor,
          configuration_format,
          configuration_inline,
          configuration_hash,
          configuration_descriptor,
          authority_hash,
          authority_descriptor,
          mode,
          profile,
          expected] = GetParam();

    n20_open_dice_inputs_t inputs;
    std::memset(&inputs, 0, sizeof(n20_open_dice_inputs_t));

    std::memcpy(inputs.code_hash, code_hash.data(), code_hash.size());
    if (0 != code_descriptor.size()) {
        inputs.code_descriptor = code_descriptor.data();
        inputs.code_descriptor_length = code_descriptor.size();
    }

    inputs.configuration_format = configuration_format;
    switch (inputs.configuration_format) {
        case n20_open_dice_configuration_format_inline_e:
            std::memcpy(
                inputs.configuration_inline, &configuration_inline[0], configuration_inline.size());
            break;
        case n20_open_dice_configuration_format_descriptor_e:
            std::memcpy(
                inputs.configuration_hash, &configuration_hash[0], configuration_hash.size());
            if (0 != configuration_descriptor.size()) {
                inputs.configuration_descriptor = configuration_descriptor.data();
                inputs.configuration_descriptor_length = configuration_descriptor.size();
            }
            break;
    }

    std::memcpy(inputs.authority_hash, authority_hash.data(), authority_hash.size());
    if (0 != authority_descriptor.size()) {
        inputs.authority_descriptor = authority_descriptor.data();
        inputs.authority_descriptor_length = authority_descriptor.size();
    }

    inputs.mode = mode;

    n20_x509_ext_open_dice_input_t open_dice_inputs = {
        &inputs,
        profile.size() ? profile.c_str() : nullptr,
    };

    n20_x509_extension_t extensions[] = {
        {
            .oid = &OID_OPEN_DICE_INPUT,
            .critical = true,
            .content_cb = n20_x509_ext_open_dice_input_content,
            .context = &open_dice_inputs,
        },
    };

    n20_x509_extensions_t exts = {
        .extensions_count = 1,
        .extensions = extensions,
    };

    // DER encode the extension.
    // First, run the formatting function with NULL stream buffer
    // to compute the length of the extension.
    n20_asn1_stream_t s;
    n20_asn1_stream_init(&s, nullptr, 0);
    n20_x509_extension(&s, &exts);
    auto exts_size = n20_asn1_stream_data_written(&s);
    ASSERT_FALSE(n20_asn1_stream_is_data_good(&s));
    ASSERT_TRUE(n20_asn1_stream_is_data_written_good(&s));
    ASSERT_EQ(expected.size(), exts_size);

    // Now allocate a buffer large enough to hold the extension,
    // reinitialize the asn1_stream and write the tbs part again.
    uint8_t buffer[2000] = {};
    n20_asn1_stream_init(&s, &buffer[0], sizeof(buffer));
    n20_x509_extension(&s, &exts);
    ASSERT_TRUE(n20_asn1_stream_is_data_good(&s));
    ASSERT_TRUE(n20_asn1_stream_is_data_written_good(&s));
    std::vector<uint8_t> got = std::vector<uint8_t>(
        n20_asn1_stream_data(&s), n20_asn1_stream_data(&s) + n20_asn1_stream_data_written(&s));
    ASSERT_EQ(expected, got);
}

TEST(X509ExtOpenDiceInputTest, NullPointers) {
    n20_asn1_stream_t s;
    n20_asn1_stream_init(&s, nullptr, 0);

    n20_x509_ext_open_dice_input_content(&s, nullptr);
    auto bytes_written = n20_asn1_stream_data_written(&s);
    ASSERT_FALSE(n20_asn1_stream_is_data_good(&s));
    ASSERT_TRUE(n20_asn1_stream_is_data_written_good(&s));
    ASSERT_EQ(0, bytes_written);

    n20_x509_ext_open_dice_input_t open_dice_inputs = {
        nullptr,
        nullptr,
    };

    bytes_written = 0;
    n20_x509_ext_open_dice_input_content(&s, &open_dice_inputs);
    bytes_written = n20_asn1_stream_data_written(&s);
    ASSERT_FALSE(n20_asn1_stream_is_data_good(&s));
    ASSERT_TRUE(n20_asn1_stream_is_data_written_good(&s));
    ASSERT_EQ(0, bytes_written);
}
